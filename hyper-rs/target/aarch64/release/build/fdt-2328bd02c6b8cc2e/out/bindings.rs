/* automatically generated by rust-bindgen 0.69.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 32;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = myctypes::c_uchar;
pub type __u_short = myctypes::c_ushort;
pub type __u_int = myctypes::c_uint;
pub type __u_long = myctypes::c_ulong;
pub type __int8_t = myctypes::c_schar;
pub type __uint8_t = myctypes::c_uchar;
pub type __int16_t = myctypes::c_short;
pub type __uint16_t = myctypes::c_ushort;
pub type __int32_t = myctypes::c_int;
pub type __uint32_t = myctypes::c_uint;
pub type __int64_t = myctypes::c_longlong;
pub type __uint64_t = myctypes::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = myctypes::c_longlong;
pub type __u_quad_t = myctypes::c_ulonglong;
pub type __intmax_t = myctypes::c_longlong;
pub type __uintmax_t = myctypes::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = myctypes::c_uint;
pub type __gid_t = myctypes::c_uint;
pub type __ino_t = myctypes::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = myctypes::c_uint;
pub type __nlink_t = myctypes::c_uint;
pub type __off_t = myctypes::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = myctypes::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [myctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = myctypes::c_long;
pub type __rlim_t = myctypes::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = myctypes::c_uint;
pub type __time_t = myctypes::c_long;
pub type __useconds_t = myctypes::c_uint;
pub type __suseconds_t = myctypes::c_long;
pub type __suseconds64_t = __int64_t;
pub type __daddr_t = myctypes::c_int;
pub type __key_t = myctypes::c_int;
pub type __clockid_t = myctypes::c_int;
pub type __timer_t = *mut myctypes::c_void;
pub type __blksize_t = myctypes::c_long;
pub type __blkcnt_t = myctypes::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = myctypes::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = myctypes::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = myctypes::c_int;
pub type __ssize_t = myctypes::c_int;
pub type __syscall_slong_t = myctypes::c_long;
pub type __syscall_ulong_t = myctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut myctypes::c_char;
pub type __intptr_t = myctypes::c_int;
pub type __socklen_t = myctypes::c_uint;
pub type __sig_atomic_t = myctypes::c_int;
pub type __time64_t = __int64_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = myctypes::c_schar;
pub type int_fast16_t = myctypes::c_int;
pub type int_fast32_t = myctypes::c_int;
pub type int_fast64_t = myctypes::c_longlong;
pub type uint_fast8_t = myctypes::c_uchar;
pub type uint_fast16_t = myctypes::c_uint;
pub type uint_fast32_t = myctypes::c_uint;
pub type uint_fast64_t = myctypes::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct region {
    pub ipa_start: u64,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_region() {
    const UNINIT: ::core::mem::MaybeUninit<region> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<region>(),
        16usize,
        concat!("Size of: ", stringify!(region))
    );
    assert_eq!(
        ::core::mem::align_of::<region>(),
        8usize,
        concat!("Alignment of ", stringify!(region))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ipa_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(region),
            "::",
            stringify!(ipa_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(region),
            "::",
            stringify!(length)
        )
    );
}
extern "C" {
    pub fn fdt_remove_node(
        fdt: *mut myctypes::c_void,
        path: *const myctypes::c_char,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_disable_node(
        fdt: *mut myctypes::c_void,
        path: *const myctypes::c_char,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_add_virtio(
        fdt: *mut myctypes::c_void,
        name: *const myctypes::c_char,
        spi_irq: u32,
        address: u64,
    );
}
extern "C" {
    pub fn fdt_add_vm_service(fdt: *mut myctypes::c_void, spi_irq: u32, address: u64, len: u64);
}
extern "C" {
    pub fn fdt_add_timer(fdt: *mut myctypes::c_void, trigger_lvl: u32);
}
extern "C" {
    pub fn fdt_add_vm_service_blk(fdt: *mut myctypes::c_void, spi_irq: u32);
}
extern "C" {
    pub fn fdt_add_cpu(
        fdt: *mut myctypes::c_void,
        linear_id: u64,
        core_id: u8,
        cluster_id: u8,
        compatible: *const myctypes::c_char,
    );
}
extern "C" {
    pub fn fdt_set_bootcmd(fdt: *mut myctypes::c_void, cmdline: *const myctypes::c_char);
}
extern "C" {
    pub fn fdt_set_initrd(fdt: *mut myctypes::c_void, start: u32, end: u32);
}
extern "C" {
    pub fn fdt_set_memory(
        fdt: *mut myctypes::c_void,
        region_num: u64,
        regions: *const region,
        node_name: *const myctypes::c_char,
    );
}
extern "C" {
    pub fn fdt_clear_initrd(fdt: *mut myctypes::c_void);
}
extern "C" {
    pub fn fdt_setup_gic(
        fdt: *mut myctypes::c_void,
        gicd_addr: u64,
        gicc_addr: u64,
        node_name: *const myctypes::c_char,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_setup_serial(
        fdt: *mut myctypes::c_void,
        compatible: *const myctypes::c_char,
        addr: u64,
        spi_irq: u32,
    );
}
extern "C" {
    pub fn fdt_set_stdout_path(fdt: *mut myctypes::c_void, p: *const myctypes::c_char);
}
extern "C" {
    pub fn fdt_clear_stdout_path(fdt: *mut myctypes::c_void);
}
extern "C" {
    pub fn fdt_create_node(
        fdt: *mut myctypes::c_void,
        path: *const myctypes::c_char,
        name: *const myctypes::c_char,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_add_property_string(
        fdt: *mut myctypes::c_void,
        node: myctypes::c_int,
        name: *const myctypes::c_char,
        str_: *const myctypes::c_char,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_add_property_u32(
        fdt: *mut myctypes::c_void,
        node: myctypes::c_int,
        name: *const myctypes::c_char,
        val: u32,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_add_property_u64_array(
        fdt: *mut myctypes::c_void,
        node: myctypes::c_int,
        name: *const myctypes::c_char,
        values: *mut u64,
        len: myctypes::c_int,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_add_property_u32_array(
        fdt: *mut myctypes::c_void,
        node: myctypes::c_int,
        name: *const myctypes::c_char,
        values: *mut u32,
        len: myctypes::c_int,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_enlarge(fdt: *mut myctypes::c_void);
}
extern "C" {
    pub fn fdt_size(fdt: *mut myctypes::c_void) -> u64;
}
extern "C" {
    pub fn fdt_pack(fdt: *mut myctypes::c_void) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_del_mem_rsv(fdt: *mut myctypes::c_void, n: myctypes::c_int) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_setup_pmu(
        fdt: *mut myctypes::c_void,
        compatible: *const myctypes::c_char,
        spi_irq: *const u32,
        spi_irq_len: u32,
        irq_affi: *const u32,
        irq_affi_len: u32,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_overlay_apply(
        fdt: *mut myctypes::c_void,
        fdto: *mut myctypes::c_void,
    ) -> myctypes::c_int;
}
extern "C" {
    pub fn fdt_open_into(
        fdt: *const myctypes::c_void,
        buf: *mut myctypes::c_void,
        bufsize: myctypes::c_int,
    ) -> myctypes::c_int;
}
